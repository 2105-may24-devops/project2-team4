apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Values.flashcard.deploy.name }}
  namespace: {{ .Values.mynamespace }}
spec:
  serviceName: {{ .Values.flashcard.service.name}}
  selector:
    matchLabels:
      stack: backend
      app: flashcard
  replicas: {{ .Values.flashcard.deploy.replicas }}
  # strategy:
  #   type: RollingUpdate
  volumeClaimTemplates:
  {{- with .Values.volumes.fcdbVol }}
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: {{ .name }}-sset
      spec:
        storageClassName: {{ .storageClassName }}
        resources:
          requests:
            storage: {{ .resources.requests.storage | quote}}
        volumeMode: Filesystem
        accessModes:
          - {{ .access }}
  {{- end}}
  template:
  {{- with .Values.flashcard }}
    metadata:
      labels:
        stack: backend
        app: flashcard
    spec:
      containers:
      - name: flashcard
        image: mdarmawan/flashcard:mdtest # TODO: Placeholder
        resources:
          limits:
            memory: "1Gi"
            cpu: "1000m"
        ports:
        - containerPort: 8089
        volumeMounts: 
        - name: embed-db
          mountPath: /app/dbdata/
        env:
        - name: spring.kafka.consumer.bootstrap-servers
          value: kafka-svc:9092 
        - name: spring.kafka.producer.bootstrap-servers
          value: kafka-svc:9092 
        envFrom:
        - configMapRef:
            name: consul-connection
        - configMapRef:
            name: db-info
  {{- end }}
      volumes: 
      - name: embed-db 
        persistentVolumeClaim:
          claimName: fcdb-pvc