---
# Source: testchart/templates/consul-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: consul-connection
data:
  spring.cloud.consul.host: consul-svc
  spring.cloud.consul.port: "8500"
---
# Source: testchart/templates/db-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: db-info
data: 
  # Database Credentials
  spring.datasource.url: jdbc:h2:file:/app/dbdata/fcdb
---
# Source: testchart/templates/consul-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: consul-svc
spec:
  selector:
    stack: dependency
    app: consul
  type: ClusterIP
  ports:
  - port: 8500
    name: consul-svc-port
---
# Source: testchart/templates/flashcard-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: flashcard-svc
spec:
  type: ClusterIP
  selector:
    stack: backend
    app: flashcard
  ports:
  - port: 8089
    name: fc-port
---
# Source: testchart/templates/gateway-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: gateway-svc
spec:
  type: LoadBalancer
  selector:
    stack: backend
    app: gateway
  ports:
  - port: 8080
    name: entrypoint
---
# Source: testchart/templates/kafka-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: kafka-svc
spec:
  selector:
    stack: dependency
    app: kafka
  type: ClusterIP
  ports:
  - port: 9092
    name: kafka-svc-port
---
# Source: testchart/templates/quiz-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: quiz-svc
spec:
  type: ClusterIP
  selector:
    stack: backend
    app: quiz
  ports:
  - port: 8090
    name: quiz-port
---
# Source: testchart/templates/zookeeper-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: zookeeper-svc
spec:
  selector:
    stack: dependency
    app: zoo
  type: ClusterIP
  ports:
    - port: 2181
      name: zookeeper-port
---
# Source: testchart/templates/consul-deploy.yaml
apiVersion: apps/v1
kind: Deployment # maybe zookeeper should be a statefulSet
metadata:
  name: consul-deploy
spec:
  selector:
    matchLabels:
      stack: dependency
      app: consul
  template:
    metadata:
      labels:
        stack: dependency
        app: consul
    spec:
      containers:
      - name: consul
        image: consul:latest
        ports: 
        - containerPort: 8500
        resources:
          limits:
            memory: "128Mi"
            cpu: "200m"
---
# Source: testchart/templates/gateway-deploy.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gateway-deploy
spec:
  replicas: 1
  selector:
    matchLabels:
      stack: backend
      app: gateway
  template:
    metadata:
      labels:
        stack: backend
        app: gateway
    spec:
      containers:
      - name: gateway
        image: mdarmawan/gateway:mdtest
        resources:
          limits:
            memory: "1Gi"
            cpu: "300m"
        ports:
        - containerPort: 8080
        env: 
        - name: spring.cloud.consul.discovery.hostname
          value: gateway-svc
        envFrom:
        - configMapRef:
            name: consul-connection
---
# Source: testchart/templates/kafka-deploy.yaml
apiVersion: apps/v1
kind: Deployment # maybe kafka should be stateful in case of interruption of messaging
metadata:
  name: kafka-deploy
spec:
  selector:
    matchLabels:
      stack: dependency
      app: kafka
  template:
    metadata:
      labels:
        stack: dependency
        app: kafka
    spec:
      containers:
      - name: kafka
        image: bitnami/kafka:latest
        ports:
        - containerPort: 9092
        resources:
          limits:
            memory: "512Mi"
            cpu: "100m"
        env:
        - name: ALLOW_PLAINTEXT_LISTENER
          value: "yes"
        - name: KAFKA_CFG_ZOOKEEPER_CONNECT
          value: zookeeper-svc:2181
---
# Source: testchart/templates/quiz-deploy.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: quiz-deploy
spec:
  replicas: 1
  selector:
    matchLabels:
      stack: backend
      app: quiz
  template:
    metadata:
      labels:
        stack: backend
        app: quiz
    spec:
      containers:
      - name: quiz
        image: mdarmawan/quiz:mdtest
        resources:
          limits:
            memory: "1.5Gi"
            cpu: "1000m"
        ports:
        - containerPort: 8090
        env: 
        - name: spring.cloud.consul.discovery.hostname
          value: quiz-svc
        envFrom:
        - configMapRef:
            name: consul-connection
---
# Source: testchart/templates/zookeeper-deploy.yaml
apiVersion: apps/v1
kind: Deployment # maybe zookeeper should be a statefulSet
metadata:
  name: zookeeper-deploy
spec:
  selector:
    matchLabels:
      stack: dependency
      app: zoo
  template:
    metadata:
      labels:
        stack: dependency
        app: zoo
    spec:
      containers:
      - name: zookeeper
        image: bitnami/zookeeper:latest
        ports: 
        - containerPort: 2181
        env:
        - name: ALLOW_ANONYMOUS_LOGIN #hard-coding here is fine, I think.
          value: "yes"
        resources:
          limits:
            memory: "128Mi"
            cpu: "100m"
---
# Source: testchart/templates/flashcard-deploy.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: flashcard-sset
spec:
  serviceName: flashcard-svc
  selector:
    matchLabels:
      stack: backend
      app: flashcard
  replicas: 2
  # strategy:
  #   type: RollingUpdate
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: fcdb-pvc
      spec:
        storageClassName: default
        resources:
          requests:
            storage: "1Gi"
        volumeMode: Filesystem
        accessModes:
          - ReadWriteOnce
  template:
    metadata:
      labels:
        stack: backend
        app: flashcard
    spec:
      containers:
      - name: flashcard
        image: mdarmawan/flashcard:mdtest
        #
        # resources:
        #   limits:
        #     memory: "1Gi"
        #     cpu: "200m"
        #
        ports:
        - containerPort: 8089
        volumeMounts: 
        - name: fcdb-pvc
          mountPath: /app/dbdata/
        env:
        - name: spring.kafka.consumer.bootstrap-servers
          value: kafka-svc:9092
        - name: spring.kafka.producer.bootstrap-servers
          value: kafka-svc:9092
        envFrom:
        - configMapRef:
            name: consul-connection
        - configMapRef:
            name: db-info
---
# Source: testchart/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: 
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/rewrite-target: "/$2"
  labels:
    name: gateway
spec:
  rules:
    # host: <Host> #Placeholder. Dunno what to put. may be optional.
  - http:
      paths:
      - pathType: Prefix
        path: "/flashcard(/|$)(.*)"
        backend:
          service:
            name: flashcard-svc
            port: 
              name: fc-port
      - pathType: Prefix
        path: "/quiz(/|$)(.*)"
        backend:
          service:
            name: quiz-svc
            port: 
              name: quiz-port
